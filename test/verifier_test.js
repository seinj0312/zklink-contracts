const { expect } = require('chai');
const hardhat = require("hardhat");

describe('Verifier unit tests', function () {
    let verifier;
    before(async () => {
        const verifierFactory = await hardhat.ethers.getContractFactory('Verifier');
        verifier = await verifierFactory.deploy();
    });

    it('verify gggregated block proof should success', async () => {
        const zkLinkPeripheryFactory = await hardhat.ethers.getContractFactory('ZkLinkPeriphery');
        const data = "0xea5f812d000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000006c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47000000000000000000000000000000000000000000000000000000000643f55ab305ef37d5f34821567bd6d2d50c07fb944ed4ea4a0d691687a57709bdbdcda0399c0e7080c6c8c64d23ec9e93c0df2f7aa398b5b02742671b843b187ebcb6455718d9f8e1ff262c5c8845077bde6a8202dcfd7917d0547853f69a7ce56c1d7cc00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000005c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47000000000000000000000000000000000000000000000000000000000643f5c0a0a5f582c9de674ffe1ed1e5077772ef0480b59d098efff46b3993904a714de8b149d88b87e429bb12e251b82fc1eca4c62eea5ef4f078a86665217418c261a1bb1d38ff403cf82338adffe11f2b678f0cbad81b6f6f407d92bb8954630194bd200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47000000000000000000000000000000000000000000000000000000000643f5c3c2b4998da211677ff27e4f4df7b3667736d46429813f69f4c38e9d2748f0f102a2c2a40b5188b10e508a430391cbb1e7409856ec8814abbba374be8d7c1d23ca1cac532f8b644b2621f718a983b0505abcfe8da4fc7d0b1373983299845c0082d00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47000000000000000000000000000000000000000000000000000000000643f5c642606b44a6977b3266b9dd70f08e33838ae9fd3cc8321b853f8bccabf68794c99be09d67e18221db19bb49b544e82298ac31588f10f037861186eec1d943c42aaffffc2e69a1781f5850cb47fe15ed53da5321b330a62f1d455e862ba4d88cd68000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000072000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000000c83c89979a27baa1500000000000000000000000000000000000000000000000ff3e5aa7f749d7ca1000000000000000000000000000000000000000000000002c69d3f12d96c57c70000000000000000000000000000000000000000000000000002ca767a4958da000000000000000000000000000000000000000000000006447a0836780b7048000000000000000000000000000000000000000000000007081e440165802c13000000000000000000000000000000000000000000000001f509527f03a45545000000000000000000000000000000000000000000000000000224b370414f1500000000000000000000000000000000000000000000000b317b529e6b1d4fa400000000000000000000000000000000000000000000000e4ac87a11ec8e02df0000000000000000000000000000000000000000000000084a61a83c2f0015af000000000000000000000000000000000000000000000000000015f4e6aa584a000000000000000000000000000000000000000000000000e0f22a1de357a8e7000000000000000000000000000000000000000000000009c41d43ebf5c53986000000000000000000000000000000000000000000000003897c2eff4227573a0000000000000000000000000000000000000000000000000000990329da2fbc000000000000000000000000000000000000000000000000000000000000000100ed87737a9cc4c7e85cb01e707ada3979a91715808dc88104f73c1d646688f200000000000000000000000000000000000000000000000000000000000000222b150896c4dacad88563aa4ef5543cde249d88ee13aac030366a41be281cd23e1e051ee813cef354871c33d11b0a5b3950d68cab42015082b0c7db9c8fd795f91745722c4158a0da653e7fb6306dbded7a7fce77a605215ca3ea5322866652320e96bfa79f4ddb695d1e4f62e93dbad91f97b10bb7897facc8e058efe8cf4c81162966854863ebd9cc9385279d353979b17b325d11b1d1b69fb718f1febdb2ff1d0067f9965280edb08b59ef55e05d9dfd79805aca291135c9e2d848d379860120f0161dfc6aed2655cd9633231cafda5a5f29a350c1ac421502facf0107f13217ad4eacd0422afaccd1036f640ad90511b48567ccd9b03dfd3f0527a7f6be2e176063c74dd432bd94057fed26423f82a39b9434ffcefcab63b19c3ad1c6a1b81192363a079c11cfa7cb299040168400b73d879d82291938a2037118ae5350380d0cab702bd2bd3aff3852f994588cf997e2e19ed46feb8fea7ecab650b5b314293ebd9ec38551b6db397561a476fad90b714e962bc2b2ca2f8ffef55f1b2b9a20b0728cc31edc9c18199aba016da48560489228b0cc9416c2d0190b66decc3c0c76f5c60a2c9fa4b39b26de28206c03f72e2bb6b2e2bb44e46cc7d800b67d040fe464eb7a334d415412b60f0f5289b1a954098c5cd4ddd9ae2cbf87370029431cb4f9037840e058c94c6d2e5e1aa9012497984057b7366d694d2a77cd04908529dd49c9f9b37ac0cfbdf018ed6a62cfae69959c974123bd7b376d04688285522938aa620e1090a821e06c2ae7d4c68d1f71558a03b012792f39ac6d26f71857184da876033a8631a2f2053e7bb1889dded808bda5f5533b313ae4efaa5fbc8224d2adcdbb5a09f2e1ca1f3080b0c683c7f2939a6c5e78bfea6d7677974564611f9c33ba61bd747024ab9cafcbe299c4806896ae5deae2d680fe0290dcec413416870bf0306b9decd8d9e826220e23e4707fdec9eb4b96dc2ec24d51277495e71654d3dd3c2ae3f46c1827888a646df9e5aae638bb759c6e1d25c68ab7dd35e41846fb9137284b517266e09470be8c7874927e2e01f043e7fb8c55e7942de304169dc48696785e043ecd9aa99da769cd5571db11eb165d88784f600e2e67551a0146a21699d16bd12693108e6df6cd7699dd364c577155debc60e9e2f09816de24d155cecebb5d7843388e9930daa963cbb6fcfb8f99c8e5ba6f86b4ce9896ac00b41c5caafa8be893210cfe800f9372bd43430a9a490ff19f040467f7ff8d1d1e34cce5c2da491713b38ee17cc03296d3388268c81ae9008ad2be763e5b20b22a92b2cbecf6be7ba6e01a57b22aaf4a9a1f6f11843d9fedaa44bf7cbbe42534071ae3c9bd2933c8d2473e0c9a780125c14ba23adbe0f38139f4aed3857b0251294d83bee791f0f8f6a782dad41e7c79e98727f88f7e5ab0e8b62cfdb288d60b0c8a8092be62dcf5296d016bec7d4e658fe9a2ec29b120223194772ecf4123dc263218f2d67051521e01740c7ac483253575959e68b6a10dd9d3d8b1a45e8f81000000000000000000000000000000000000000000000000000000000000000419c0e7080c6c8c64d23ec9e93c0df2f7aa398b5b02742671b843b187ebcb6455149d88b87e429bb12e251b82fc1eca4c62eea5ef4f078a86665217418c261a1b0c2a40b5188b10e508a430391cbb1e7409856ec8814abbba374be8d7c1d23ca11e09d67e18221db19bb49b544e82298ac31588f10f037861186eec1d943c42aa00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002";
        let decodeResult = zkLinkPeripheryFactory.interface.decodeFunctionData("proveBlocks", data);
        let _proof = decodeResult['_proof'];
        expect(await verifier.verifyAggregatedBlockProof(
            _proof.recursiveInput,
            _proof.proof,
            _proof.vkIndexes,
            _proof.commitments,
            _proof.subproofsLimbs)).to.eq(true);
    });
});
